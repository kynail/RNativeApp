{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"leftIcon\", \"iconColor\", \"rightIcon\", \"inputStyle\", \"containerStyle\", \"placeholderTextColor\", \"handlePasswordVisibility\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport PropTypes from 'prop-types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 4,\n    flexDirection: 'row',\n    padding: 12\n  },\n  leftIcon: {\n    marginRight: 10\n  },\n  input: {\n    flex: 1,\n    width: '100%',\n    fontSize: 18\n  },\n  rightIcon: {\n    alignSelf: 'center',\n    marginLeft: 10\n  }\n});\n\nfunction InputField(_ref) {\n  var leftIcon = _ref.leftIcon,\n      _ref$iconColor = _ref.iconColor,\n      iconColor = _ref$iconColor === void 0 ? '#000' : _ref$iconColor,\n      rightIcon = _ref.rightIcon,\n      inputStyle = _ref.inputStyle,\n      containerStyle = _ref.containerStyle,\n      _ref$placeholderTextC = _ref.placeholderTextColor,\n      placeholderTextColor = _ref$placeholderTextC === void 0 ? '#444' : _ref$placeholderTextC,\n      handlePasswordVisibility = _ref.handlePasswordVisibility,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  return _jsxs(View, {\n    style: [styles.container, containerStyle],\n    children: [leftIcon ? _jsx(MaterialCommunityIcons, {\n      name: leftIcon,\n      size: 20,\n      color: iconColor,\n      style: styles.leftIcon\n    }) : null, _jsx(TextInput, _objectSpread(_objectSpread({}, rest), {}, {\n      placeholderTextColor: placeholderTextColor,\n      style: [styles.input, inputStyle]\n    })), rightIcon ? _jsx(TouchableOpacity, {\n      onPress: handlePasswordVisibility,\n      children: _jsx(MaterialCommunityIcons, {\n        name: rightIcon,\n        size: 20,\n        color: iconColor,\n        style: styles.rightIcon\n      })\n    }) : null]\n  });\n}\n\nInputField.propTypes = {\n  leftIcon: PropTypes.string.isRequired,\n  iconColor: PropTypes.string.isRequired,\n  rightIcon: PropTypes.string.isRequired,\n  inputStyle: PropTypes.string.isRequired,\n  containerStyle: PropTypes.string.isRequired,\n  placeholderTextColor: PropTypes.string.isRequired,\n  handlePasswordVisibility: PropTypes.func.isRequired\n};\nexport default InputField;","map":{"version":3,"sources":["C:/Users/kadag/epitech/RNativeApp/components/inputfield.js"],"names":["React","MaterialCommunityIcons","PropTypes","styles","StyleSheet","create","container","borderRadius","flexDirection","padding","leftIcon","marginRight","input","flex","width","fontSize","rightIcon","alignSelf","marginLeft","InputField","iconColor","inputStyle","containerStyle","placeholderTextColor","handlePasswordVisibility","rest","propTypes","string","isRequired","func"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;AAIA,SAASC,sBAAT,QAAuC,oBAAvC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;AAEA,IAAMC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,YAAY,EAAE,CADL;AAETC,IAAAA,aAAa,EAAE,KAFN;AAGTC,IAAAA,OAAO,EAAE;AAHA,GADoB;AAM/BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,EAAE;AADL,GANqB;AAS/BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAE,CADD;AAELC,IAAAA,KAAK,EAAE,MAFF;AAGLC,IAAAA,QAAQ,EAAE;AAHL,GATwB;AAc/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,SAAS,EAAE,QADF;AAETC,IAAAA,UAAU,EAAE;AAFH;AAdoB,CAAlB,CAAf;;AAoBA,SAASC,UAAT,OASG;AAAA,MARDT,QAQC,QARDA,QAQC;AAAA,4BAPDU,SAOC;AAAA,MAPDA,SAOC,+BAPW,MAOX;AAAA,MANDJ,SAMC,QANDA,SAMC;AAAA,MALDK,UAKC,QALDA,UAKC;AAAA,MAJDC,cAIC,QAJDA,cAIC;AAAA,mCAHDC,oBAGC;AAAA,MAHDA,oBAGC,sCAHsB,MAGtB;AAAA,MAFDC,wBAEC,QAFDA,wBAEC;AAAA,MADEC,IACF;;AACD,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACtB,MAAM,CAACG,SAAR,EAAmBgB,cAAnB,CAAb;AAAA,eACGZ,QAAQ,GACP,KAAC,sBAAD;AACE,MAAA,IAAI,EAAEA,QADR;AAEE,MAAA,IAAI,EAAE,EAFR;AAGE,MAAA,KAAK,EAAEU,SAHT;AAIE,MAAA,KAAK,EAAEjB,MAAM,CAACO;AAJhB,MADO,GAOL,IARN,EASE,KAAC,SAAD,kCAEMe,IAFN;AAGE,MAAA,oBAAoB,EAAEF,oBAHxB;AAIE,MAAA,KAAK,EAAE,CAACpB,MAAM,CAACS,KAAR,EAAeS,UAAf;AAJT,OATF,EAeGL,SAAS,GACR,KAAC,gBAAD;AAAkB,MAAA,OAAO,EAAEQ,wBAA3B;AAAA,gBACE,KAAC,sBAAD;AACE,QAAA,IAAI,EAAER,SADR;AAEE,QAAA,IAAI,EAAE,EAFR;AAGE,QAAA,KAAK,EAAEI,SAHT;AAIE,QAAA,KAAK,EAAEjB,MAAM,CAACa;AAJhB;AADF,MADQ,GASN,IAxBN;AAAA,IADF;AA4BD;;AAEDG,UAAU,CAACO,SAAX,GAAuB;AACrBhB,EAAAA,QAAQ,EAAER,SAAS,CAACyB,MAAV,CAAiBC,UADN;AAErBR,EAAAA,SAAS,EAAElB,SAAS,CAACyB,MAAV,CAAiBC,UAFP;AAGrBZ,EAAAA,SAAS,EAAEd,SAAS,CAACyB,MAAV,CAAiBC,UAHP;AAIrBP,EAAAA,UAAU,EAAEnB,SAAS,CAACyB,MAAV,CAAiBC,UAJR;AAKrBN,EAAAA,cAAc,EAAEpB,SAAS,CAACyB,MAAV,CAAiBC,UALZ;AAMrBL,EAAAA,oBAAoB,EAAErB,SAAS,CAACyB,MAAV,CAAiBC,UANlB;AAOrBJ,EAAAA,wBAAwB,EAAEtB,SAAS,CAAC2B,IAAV,CAAeD;AAPpB,CAAvB;AAUA,eAAeT,UAAf","sourcesContent":["import React from 'react';\nimport {\n  View, StyleSheet, TextInput, TouchableOpacity,\n} from 'react-native';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport PropTypes from 'prop-types';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 4,\n    flexDirection: 'row',\n    padding: 12,\n  },\n  leftIcon: {\n    marginRight: 10,\n  },\n  input: {\n    flex: 1,\n    width: '100%',\n    fontSize: 18,\n  },\n  rightIcon: {\n    alignSelf: 'center',\n    marginLeft: 10,\n  },\n});\n\nfunction InputField({\n  leftIcon,\n  iconColor = '#000',\n  rightIcon,\n  inputStyle,\n  containerStyle,\n  placeholderTextColor = '#444',\n  handlePasswordVisibility,\n  ...rest\n}) {\n  return (\n    <View style={[styles.container, containerStyle]}>\n      {leftIcon ? (\n        <MaterialCommunityIcons\n          name={leftIcon}\n          size={20}\n          color={iconColor}\n          style={styles.leftIcon}\n        />\n      ) : null}\n      <TextInput\n        // eslint-disable-next-line react/jsx-props-no-spreading\n        {...rest}\n        placeholderTextColor={placeholderTextColor}\n        style={[styles.input, inputStyle]}\n      />\n      {rightIcon ? (\n        <TouchableOpacity onPress={handlePasswordVisibility}>\n          <MaterialCommunityIcons\n            name={rightIcon}\n            size={20}\n            color={iconColor}\n            style={styles.rightIcon}\n          />\n        </TouchableOpacity>\n      ) : null}\n    </View>\n  );\n}\n\nInputField.propTypes = {\n  leftIcon: PropTypes.string.isRequired,\n  iconColor: PropTypes.string.isRequired,\n  rightIcon: PropTypes.string.isRequired,\n  inputStyle: PropTypes.string.isRequired,\n  containerStyle: PropTypes.string.isRequired,\n  placeholderTextColor: PropTypes.string.isRequired,\n  handlePasswordVisibility: PropTypes.func.isRequired,\n};\n\nexport default InputField;\n"]},"metadata":{},"sourceType":"module"}