{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Firebase from \"../config/firebase\";\nimport { AuthenticatedUserContext } from \"./AuthenticatedUserProvider\";\nimport AuthStack from \"./authstack\";\nimport HomeStack from \"./homestack\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar auth = Firebase.auth();\nexport default function RootNavigator() {\n  var _useContext = useContext(AuthenticatedUserContext),\n      user = _useContext.user,\n      setUser = _useContext.setUser;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  useEffect(function () {\n    var unsubscribeAuth = auth.onAuthStateChanged(function _callee(authenticatedUser) {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(authenticatedUser ? setUser(authenticatedUser) : setUser(null));\n\n            case 3:\n              setIsLoading(false);\n              _context.next = 9;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 6]], Promise);\n    });\n    return unsubscribeAuth;\n  }, []);\n\n  if (isLoading) {\n    return _jsx(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: _jsx(ActivityIndicator, {\n        size: \"large\"\n      })\n    });\n  }\n\n  return _jsx(NavigationContainer, {\n    children: user ? _jsx(HomeStack, {}) : _jsx(AuthStack, {})\n  });\n}","map":{"version":3,"sources":["C:/Users/kadag/epitech/RNativeApp/navigation/rootnavigator.js"],"names":["React","useContext","useEffect","useState","NavigationContainer","Firebase","AuthenticatedUserContext","AuthStack","HomeStack","auth","RootNavigator","user","setUser","isLoading","setIsLoading","unsubscribeAuth","onAuthStateChanged","authenticatedUser","console","log","flex","justifyContent","alignItems"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,mBAAT,QAAoC,0BAApC;;;AAGA,OAAOC,QAAP;AACA,SAASC,wBAAT;AACA,OAAOC,SAAP;AACA,OAAOC,SAAP;;AAEA,IAAMC,IAAI,GAAGJ,QAAQ,CAACI,IAAT,EAAb;AAEA,eAAe,SAASC,aAAT,GAAyB;AACtC,oBAA0BT,UAAU,CAACK,wBAAD,CAApC;AAAA,MAAQK,IAAR,eAAQA,IAAR;AAAA,MAAcC,OAAd,eAAcA,OAAd;;AACA,kBAAkCT,QAAQ,CAAC,IAAD,CAA1C;AAAA;AAAA,MAAOU,SAAP;AAAA,MAAkBC,YAAlB;;AAEAZ,EAAAA,SAAS,CAAC,YAAM;AAEd,QAAMa,eAAe,GAAGN,IAAI,CAACO,kBAAL,CACtB,iBAAOC,iBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEWA,iBAAiB,GACpBL,OAAO,CAACK,iBAAD,CADa,GAEpBL,OAAO,CAAC,IAAD,CAJf;;AAAA;AAKIE,cAAAA,YAAY,CAAC,KAAD,CAAZ;AALJ;AAAA;;AAAA;AAAA;AAAA;AAOII,cAAAA,OAAO,CAACC,GAAR;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADsB,CAAxB;AAcA,WAAOJ,eAAP;AACD,GAjBQ,EAiBN,EAjBM,CAAT;;AAmBA,MAAIF,SAAJ,EAAe;AACb,WACE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEO,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,cAAc,EAAE,QAA3B;AAAqCC,QAAAA,UAAU,EAAE;AAAjD,OAAb;AAAA,gBACE,KAAC,iBAAD;AAAmB,QAAA,IAAI,EAAC;AAAxB;AADF,MADF;AAKD;;AAED,SACE,KAAC,mBAAD;AAAA,cACGX,IAAI,GAAG,KAAC,SAAD,KAAH,GAAmB,KAAC,SAAD;AAD1B,IADF;AAKD","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { View, ActivityIndicator } from 'react-native';\n\nimport Firebase from '../config/firebase';\nimport { AuthenticatedUserContext } from './AuthenticatedUserProvider';\nimport AuthStack from './authstack';\nimport HomeStack from './homestack';\n\nconst auth = Firebase.auth();\n\nexport default function RootNavigator() {\n  const { user, setUser } = useContext(AuthenticatedUserContext);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // onAuthStateChanged returns an unsubscriber\n    const unsubscribeAuth = auth.onAuthStateChanged(\n      async (authenticatedUser) => {\n        try {\n          await (authenticatedUser\n            ? setUser(authenticatedUser)\n            : setUser(null));\n          setIsLoading(false);\n        } catch (error) {\n          console.log(error);\n        }\n      },\n    );\n\n    // unsubscribe auth listener on unmount\n    return unsubscribeAuth;\n  }, []);\n\n  if (isLoading) {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <ActivityIndicator size=\"large\" />\n      </View>\n    );\n  }\n\n  return (\n    <NavigationContainer>\n      {user ? <HomeStack /> : <AuthStack />}\n    </NavigationContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}