{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport RNButton from \"react-native-web/dist/exports/Button\";\nimport PropTypes from 'prop-types';\nimport { Button, InputField, ErrorMessage } from \"../components\";\nimport Firebase from \"../config/firebase\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar auth = Firebase.auth();\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#e93b81',\n    paddingTop: 50,\n    paddingHorizontal: 12\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: '600',\n    color: '#fff',\n    alignSelf: 'center',\n    paddingBottom: 24\n  }\n});\nexport default function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      passwordVisibility = _useState6[0],\n      setPasswordVisibility = _useState6[1];\n\n  var _useState7 = useState('eye'),\n      _useState8 = _slicedToArray(_useState7, 2),\n      rightIcon = _useState8[0],\n      setRightIcon = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      loginError = _useState10[0],\n      setLoginError = _useState10[1];\n\n  var handlePasswordVisibility = function handlePasswordVisibility() {\n    if (rightIcon === 'eye') {\n      setRightIcon('eye-off');\n      setPasswordVisibility(!passwordVisibility);\n    } else if (rightIcon === 'eye-off') {\n      setRightIcon('eye');\n      setPasswordVisibility(!passwordVisibility);\n    }\n  };\n\n  var onLogin = function onLogin() {\n    return _regeneratorRuntime.async(function onLogin$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n\n            if (!(email !== '' && password !== '')) {\n              _context.next = 4;\n              break;\n            }\n\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(auth.signInWithEmailAndPassword(email, password));\n\n          case 4:\n            _context.next = 9;\n            break;\n\n          case 6:\n            _context.prev = 6;\n            _context.t0 = _context[\"catch\"](0);\n            setLoginError(_context.t0.message);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 6]], Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(StatusBar, {\n      style: {\n        style: 'dark-content'\n      }\n    }), _jsx(Text, {\n      style: styles.title,\n      children: \"Login\"\n    }), _jsx(InputField, {\n      inputStyle: {\n        fontSize: 14\n      },\n      containerStyle: {\n        backgroundColor: '#fff',\n        marginBottom: 20\n      },\n      leftIcon: \"email\",\n      placeholder: \"Enter email\",\n      autoCapitalize: \"none\",\n      keyboardType: \"email-address\",\n      textContentType: \"emailAddress\",\n      autoFocus: true,\n      value: email,\n      onChangeText: function onChangeText(text) {\n        return setEmail(text);\n      }\n    }), _jsx(InputField, {\n      inputStyle: {\n        fontSize: 14\n      },\n      containerStyle: {\n        backgroundColor: '#fff',\n        marginBottom: 20\n      },\n      leftIcon: \"lock\",\n      placeholder: \"Enter password\",\n      autoCapitalize: \"none\",\n      autoCorrect: false,\n      secureTextEntry: passwordVisibility,\n      textContentType: \"password\",\n      rightIcon: rightIcon,\n      value: password,\n      onChangeText: function onChangeText(text) {\n        return setPassword(text);\n      },\n      handlePasswordVisibility: handlePasswordVisibility\n    }), loginError ? _jsx(ErrorMessage, {\n      error: loginError,\n      visible: true\n    }) : null, _jsx(Button, {\n      onPress: onLogin,\n      backgroundColor: \"#f57c00\",\n      title: \"Login\",\n      tileColor: \"#fff\",\n      titleSize: 20,\n      containerStyle: {\n        marginBottom: 24\n      }\n    }), _jsx(RNButton, {\n      onPress: function onPress() {\n        return navigation.navigate('Signup');\n      },\n      title: \"Go to Signup\",\n      color: \"#fff\"\n    })]\n  });\n}\nLoginScreen.propTypes = {\n  navigation: PropTypes.shape({\n    navigate: PropTypes.func.isRequired\n  }).isRequired\n};","map":{"version":3,"sources":["C:/Users/kadag/epitech/RNativeApp/screens/loginscreen.js"],"names":["StatusBar","React","useState","PropTypes","Button","InputField","ErrorMessage","Firebase","auth","styles","StyleSheet","create","container","flex","backgroundColor","paddingTop","paddingHorizontal","title","fontSize","fontWeight","color","alignSelf","paddingBottom","LoginScreen","navigation","email","setEmail","password","setPassword","passwordVisibility","setPasswordVisibility","rightIcon","setRightIcon","loginError","setLoginError","handlePasswordVisibility","onLogin","signInWithEmailAndPassword","message","style","marginBottom","text","navigate","propTypes","shape","func","isRequired"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { useState } from 'react';\nimport {\n  StyleSheet, Text, View, Button as RNButton,\n} from 'react-native';\nimport PropTypes from 'prop-types';\n\nimport { Button, InputField, ErrorMessage } from '../components';\nimport Firebase from '../config/firebase';\n\nconst auth = Firebase.auth();\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#e93b81',\n    paddingTop: 50,\n    paddingHorizontal: 12,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: '600',\n    color: '#fff',\n    alignSelf: 'center',\n    paddingBottom: 24,\n  },\n});\n\nexport default function LoginScreen({ navigation }) {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [passwordVisibility, setPasswordVisibility] = useState(true);\n  const [rightIcon, setRightIcon] = useState('eye');\n  const [loginError, setLoginError] = useState('');\n\n  const handlePasswordVisibility = () => {\n    if (rightIcon === 'eye') {\n      setRightIcon('eye-off');\n      setPasswordVisibility(!passwordVisibility);\n    } else if (rightIcon === 'eye-off') {\n      setRightIcon('eye');\n      setPasswordVisibility(!passwordVisibility);\n    }\n  };\n\n  const onLogin = async () => {\n    try {\n      if (email !== '' && password !== '') {\n        await auth.signInWithEmailAndPassword(email, password);\n      }\n    } catch (error) {\n      setLoginError(error.message);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style={{ style: 'dark-content' }} />\n      <Text style={styles.title}>Login</Text>\n      <InputField\n        inputStyle={{\n          fontSize: 14,\n        }}\n        containerStyle={{\n          backgroundColor: '#fff',\n          marginBottom: 20,\n        }}\n        leftIcon=\"email\"\n        placeholder=\"Enter email\"\n        autoCapitalize=\"none\"\n        keyboardType=\"email-address\"\n        textContentType=\"emailAddress\"\n        autoFocus\n        value={email}\n        onChangeText={(text) => setEmail(text)}\n      />\n      <InputField\n        inputStyle={{\n          fontSize: 14,\n        }}\n        containerStyle={{\n          backgroundColor: '#fff',\n          marginBottom: 20,\n        }}\n        leftIcon=\"lock\"\n        placeholder=\"Enter password\"\n        autoCapitalize=\"none\"\n        autoCorrect={false}\n        secureTextEntry={passwordVisibility}\n        textContentType=\"password\"\n        rightIcon={rightIcon}\n        value={password}\n        onChangeText={(text) => setPassword(text)}\n        handlePasswordVisibility={handlePasswordVisibility}\n      />\n      {loginError ? <ErrorMessage error={loginError} visible /> : null}\n      <Button\n        onPress={onLogin}\n        backgroundColor=\"#f57c00\"\n        title=\"Login\"\n        tileColor=\"#fff\"\n        titleSize={20}\n        containerStyle={{\n          marginBottom: 24,\n        }}\n      />\n      <RNButton\n        onPress={() => navigation.navigate('Signup')}\n        title=\"Go to Signup\"\n        color=\"#fff\"\n      />\n    </View>\n  );\n}\n\nLoginScreen.propTypes = {\n  navigation: PropTypes.shape({\n    navigate: PropTypes.func.isRequired,\n  }).isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}